//
// Problem 2: Even Fibonacci Numbers
//
// Each new term in the Fibonacci sequence is generated by adding the previous two terms.
// By starting with 1 and 2, the first 10 terms will be:
//      1, 2, 3, 5, 8, 13, 21, 34, 55, 89
// By considering the terms in the Fibonacci sequence whose values do not exceed four million,
// find the sum of the even-valued terms.
//
// 4613732
//
// https://projecteuler.net/problem=2
//

#include <iostream>
#include <vector>

int calculate_sum_of_even_fibbonacci_numbers(const float max_value) {
    std::cout << "Calculating sum of even Fibonacci numbers until " << max_value;

    std::vector<int> fibbonacci_sequence = {1, 2};

    while (fibbonacci_sequence[fibbonacci_sequence.size() - 2] < max_value) {
        std::cout << fibbonacci_sequence[fibbonacci_sequence.size() - 2] << "\n";
        fibbonacci_sequence.push_back(fibbonacci_sequence[fibbonacci_sequence.size()-2] + fibbonacci_sequence[fibbonacci_sequence.size()-3]);
    }
    std::cout << "\n";

    int total = 0;
    for (const int i : fibbonacci_sequence)
    {
        if(fibbonacci_sequence[i] % 2 != 0)
            total += i;
    }

    return total;
}

int main() {
    int fibbonacchi_sum = calculate_sum_of_even_fibbonacci_numbers(4e6);

    std::cout << "Sum of even-valued terms: " << fibbonacchi_sum;
    return 0;
}
